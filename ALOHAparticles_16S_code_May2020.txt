1) ASV generation from demultiplexed fastqs, using DADA2 on a server and the Silva v138 database

library(dada2); packageVersion("dada2")
setwd("~/eint_dada2/")
path <- "~/eint_dada2/"
forward_reads <- sort(list.files(path,pattern="_R1_001.fastq.gz",full.names=TRUE))
reverse_reads <- sort(list.files(path,pattern="_R2_001.fastq.gz",full.names=TRUE))
sample.names <- forward_reads
filtFs <- file.path(path, "filtered", paste0(sample.names, "_F_filt.fastq.gz"))
filtRs <- file.path(path, "filtered", paste0(sample.names, "_R_filt.fastq.gz"))
names(filtFs) <- sample.names
names(filtRs) <- sample.names
filtered_out <- filterAndTrim(forward_reads, filtFs, reverse_reads, filtRs, truncLen=c(270,160),maxN=0, maxEE=c(3,8), truncQ=8, rm.phix=TRUE, compress=TRUE,multithread=TRUE)
write.table(filtered_out, "filtered_out.txt")
errF <- learnErrors(filtFs, nbases=3e+08, multithread=TRUE)
errR <- learnErrors(filtRs, nbases=3e+08, multithread=TRUE) 
pdf("~/eint_dada2/errF.pdf")
plotErrors(errF, nominalQ=TRUE)
dev.off()
derep_forward <- derepFastq(filtFs, verbose=TRUE)
names(derep_forward) <- sample.names
derep_reverse <- derepFastq(filtRs, verbose=TRUE)
names(derep_reverse) <- sample.names
dada_forward <- dada(derep_forward, err=errF, pool=TRUE)
dada_reverse <- dada(derep_reverse, err=errR, pool=TRUE)
merged_amplicons <- mergePairs(dada_forward, derep_forward, dada_reverse, derep_reverse, verbose=TRUE)
head(merged_amplicons)
seqtab <- makeSequenceTable(merged_amplicons)
class(seqtab)
dim(seqtab)
seqtab.nochim <- removeBimeraDenovo(seqtab, verbose=T)
sum(seqtab.nochim)/sum(seqtab)
getN <- function(x) sum(getUniques(x))
track <- cbind(filtered_out, sapply(dada_forward, getN), sapply(dada_reverse, getN), sapply(merged_amplicons, getN), rowSums(seqtab.nochim))
colnames(track) <- c("input", "filtered", "denoisedF", "denoisedR", "merged", "nonchim")
rownames(track) <- sample.names
head(track)
write.table(track, "eint_v5_track_seqnumbers.tsv",sep="\t")
taxa <- assignTaxonomy(seqtab.nochim, "~/eint_dada2/silva_nr_v138_train_set.fa.gz", tryRC=T)
taxa.plus <- addSpecies(taxa, "~/eint_dada2/silva_species_assignment_v138.fa.gz", verbose=TRUE)
unname(taxa.plus)
asv_headers <- vector(dim(seqtab.nochim)[2], mode="character")  
for (i in 1:dim(seqtab.nochim)[2]) {
 asv_headers[i] <- paste(">ASV", i, sep="_")
 }
asv_seqs <- colnames(seqtab.nochim)
asv_fasta <- c(rbind(asv_headers, asv_seqs))
write.table(asv_fasta, "eint_ASV_Apr20_v5.fasta", sep="\t",quote=F, col.names=NA)
asv_tab <- t(seqtab.nochim)
row.names(asv_tab) <- sub(">", "", asv_headers)
write.table(asv_tab,"eint_asv_counts_Apr20_v5.tsv",sep="\t", quote=F, col.names=NA) 
asv_tax <- taxa.plus
row.names(asv_tax) <- sub(">", "", asv_headers)
write.table(asv_tax,"eint_ASVs_tax_Apr20_v5.tsv", sep="\t", quote=F, col.names=NA)

2) Manually remove sequences classified as eukaryotes, plastids, and mitochondria, and those not classified at the domain level, by sorting in Excel

3) Subsample each sample to 8,950 sequences using vegan in RStudio

library("vegan")
setwd("~/Desktop/vegan")
eint_unnorm <- read.table("~/Desktop/vegan/eint_v5_unnorm_v2.csv", sep=",", header=TRUE, row.names=1)
View(eint_unnorm)
eint_norm <- matrix(nrow=72,ncol=11861)
eint_norm <- rrarefy(eint_unnorm,8950)
View(eint_norm)
write.table(eint_norm, "~/Desktop/vegan/eint_dada2_v5_normalized8950.csv", sep=",")

4) Manually remove ASVs that no longer contain sequences and calculate relative abundances in Excel

5) Remove row numbers from fasta

6) Align fasta using DECIPHER in RStudio

library(DECIPHER)
fas <- "~/Desktop/vegan/eint_v5_fasta_clean.txt"
dna <- readDNAStringSet(fas)
dna
aligned_DNA <- AlignSeqs(dna)
aligned_DNA
writeXStringSet(aligned_DNA, file="~/Desktop/vegan/eint_dada2_v5_aligned_fasta.txt")

7) Build a phylogenetic tree using aligned sequences in phangorn on a server, then calculate weighted UniFrac distance using the tree and subsampled relative abundances from step #4

setwd("~/eint_dada2")
library(phangorn)
file="~/eint_dada2/eint_dada2_v5_aligned_fasta.txt"
data = read.phyDat(file, format="fasta", type="DNA")
matrix <- dist.ml(data)
treeUPGMA <- upgma(matrix)
pdf("~/eint_dada2/tree_v2.pdf")
plot(treeUPGMA, main="UPGMA")
dev.off()
OTUtab <- read.table("~/eint_dada2/eint_v5_v2_relabund.csv", sep=",", header=TRUE, row.names=1)
library(phyloseq)
OTU = otu_table(OTUtab, taxa_are_rows=TRUE)
physeq = phyloseq(OTU, treeUPGMA)
physeq
UniFrac(physeq, weighted=TRUE, normalized=TRUE, parallel=FALSE, fast=TRUE) 